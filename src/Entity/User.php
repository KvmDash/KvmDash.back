<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
/**
 * User Entity
 * 
 * This class represents a user in the system. It is managed by Doctrine ORM
 * and implements the Symfony Security interfaces for authentication.
 * 
 * Implemented interfaces:
 * - UserInterface: Required for the Symfony Security component
 * - PasswordAuthenticatedUserInterface: Enables authentication using passwords
 */
#[ORM\Entity]
class User implements UserInterface, PasswordAuthenticatedUserInterface
{

    private ?TranslatorInterface $translator = null;

    // Setter for the translator
    public function setTranslator(TranslatorInterface $translator): void 
    {
        $this->translator = $translator;
    }

    /**
     * The unique ID of the user
     * 
     * @var int This ID is automatically generated by the database (Auto-Increment)
     * and serves as the primary key for the record.
     */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private int $id;

    /**
     * The email address of the user
     * 
     * @var string|null The email is used as the username and must be unique.
     * It serves to identify the user in the system.
     */
    #[ORM\Column(length: 180, unique: true)]
    private ?string $email = null;

    /**
     * The roles of the user in the system
     * 
     * @var array<int,string> An array of role identifiers that define the permissions
     * of the user (e.g., 'ROLE_ADMIN', 'ROLE_USER', etc.).
     * Each user has at least the role 'ROLE_USER'.
     */
    #[ORM\Column]
    private array $roles = [];

    /**
     * The encrypted password of the user
     * 
     * @var string|null Contains the hash of the password, not the plaintext password.
     * Encryption should be done by a PasswordHasher service.
     */
    #[ORM\Column]
    private ?string $password = null;

    /**
     * Constructor for the User class
     * 
     * Initializes the ID with 0, which will be overwritten by Doctrine later
     * when the user is saved to the database.
     */
    public function __construct()
    {
        $this->id = 0;
    }

    /**
     * Returns the ID of the user
     * 
     * @return int|null The unique ID of the user, or null if not yet set
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Returns the email address of the user
     * 
     * @return string|null The email address or null if not set
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets the email address of the user
     * 
     * @param string $email The email address to set
     * @return $this For method chaining
     */
    public function setEmail(string $email): static
    {
        $this->email = $email;
        return $this;
    }

    /**
     * Returns the roles of the user
     * 
     * This method is used by the security system to check permissions.
     * Each user automatically receives the role 'ROLE_USER'.
     * 
     * @return array<int,string> An array with all roles of the user
     */
    public function getRoles(): array
    {
        $roles = $this->roles;
        $roles[] = 'ROLE_USER';
        return array_unique($roles);
    }

    /**
     * Sets the roles of the user
     * 
     * @param array<int,string> $roles Array with the roles to set
     * @return $this For method chaining
     */
    public function setRoles(array $roles): static
    {
        $this->roles = $roles;
        return $this;
    }

    /**
     * Returns the encrypted password of the user
     * 
     * This method is used by the security system during authentication.
     * 
     * @return string|null The encrypted password
     */
    public function getPassword(): ?string
    {
        return $this->password;
    }

    /**
     * Sets the encrypted password of the user
     * 
     * Note: The password should be hashed using a PasswordHasherInterface
     * service before setting it.
     * 
     * @param string $password The (already encrypted) password to set
     * @return $this For method chaining
     */
    public function setPassword(string $password): static
    {
        $this->password = $password;
        return $this;
    }

    /**
     * Removes sensitive data from the user object
     * 
     * This method is called when the user object is serialized
     * to ensure that no sensitive data is stored in the session.
     * 
     * @return void
     */
    public function eraseCredentials(): void
    {
        // If temporary, sensitive data is stored in the object, delete it here
    }

    /**
     * Returns the unique identifier of the user
     * 
     * This method is used by the security system to identify the user.
     * 
     * @return non-empty-string The email address as identifier
     * @throws \RuntimeException If no valid email address is available
     */
    public function getUserIdentifier(): string
    {
        $email = trim($this->email ?? '');
        if ($email === '') {
            throw new \RuntimeException(
                $this->translator?->trans('error.invalid_email') ?? 'Invalid or missing email address'
            );
        }
    
        return $email;
    }
}
